import React, { useState, useEffect } from "react";
import { ChakraProvider, Box, VStack, Heading, FormControl, FormLabel, Input, Button, Text, useToast, List, ListItem, IconButton, InputGroup, InputRightElement, useDisclosure, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Textarea } from "@chakra-ui/react";
import { FaPlus, FaEdit, FaTrash } from "react-icons/fa";

const API_BASE_URL = "https://backengine-rkqd.fly.dev";

const Index = () => {
  const [todos, setTodos] = useState([]);
  const [accessToken, setAccessToken] = useState("");
  const [isAuthenticating, setIsAuthenticating] = useState(true);
  const [newTodo, setNewTodo] = useState({ title: "", description: "" });
  const [editingTodo, setEditingTodo] = useState(null);
  const { isOpen, onOpen, onClose } = useDisclosure();
  const toast = useToast();

  // Authentication
  const authenticate = async (email, password, isLogin) => {
    try {
      const response = await fetch(`${API_BASE_URL}/${isLogin ? "login" : "signup"}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();
      if (response.status === 200) {
        setAccessToken(data.accessToken);
        setIsAuthenticating(false);
        toast({
          title: isLogin ? "Logged in" : "Signed up",
          status: "success",
          duration: 2000,
          isClosable: true,
        });
        fetchTodos();
      } else {
        toast({
          title: "Error",
          description: data.error,
          status: "error",
          duration: 2000,
          isClosable: true,
        });
        setIsAuthenticating(false);
      }
    } catch (error) {
      toast({
        title: "Error",
        description: error.message,
        status: "error",
        duration: 2000,
        isClosable: true,
      });
      setIsAuthenticating(false);
    }
  };

  // Fetch todos
  const fetchTodos = async () => {
    const response = await fetch(`${API_BASE_URL}/todos`, {
      headers: { Authorization: `Bearer ${accessToken}` },
    });
    const todos = await response.json();
    setTodos(todos);
  };

  // Add new todo
  const addTodo = async () => {
    const response = await fetch(`${API_BASE_URL}/todos`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${accessToken}`,
      },
      body: JSON.stringify(newTodo),
    });

    if (response.ok) {
      setNewTodo({ title: "", description: "" });
      fetchTodos();
    }
  };

  // Update todo
  const updateTodo = async () => {
    const response = await fetch(`${API_BASE_URL}/todos/${editingTodo.id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${accessToken}`,
      },
      body: JSON.stringify(editingTodo),
    });

    if (response.ok) {
      fetchTodos();
      onClose();
    }
  };

  // Delete todo
  const deleteTodo = async (id) => {
    const response = await fetch(`${API_BASE_URL}/todos/${id}`, {
      method: "DELETE",
      headers: { Authorization: `Bearer ${accessToken}` },
    });

    if (response.ok) {
      fetchTodos();
    }
  };

  // Open edit modal
  const openEditModal = (todo) => {
    setEditingTodo(todo);
    onOpen();
  };

  useEffect(() => {
    // Try to authenticate with saved credentials if available
    const savedAccessToken = localStorage.getItem("accessToken");
    if (savedAccessToken) {
      setAccessToken(savedAccessToken);
      setIsAuthenticating(false);
      fetchTodos();
    } else {
      setIsAuthenticating(false);
    }
  }, []);

  // Save access token to local storage on change
  useEffect(() => {
    if (accessToken) {
      localStorage.setItem("accessToken", accessToken);
    }
  }, [accessToken]);

  if (isAuthenticating) {
    return <Text>Loading...</Text>;
  }

  if (!accessToken) {
    return (
      <Box>
        {/* Authentication Form */}
        {/* You can add the form for signup or login here */}
      </Box>
    );
  }

  return (
    <ChakraProvider>
      <VStack spacing={4}>
        <Heading>Todo App</Heading>
        {/* Add Todo Form */}
        <FormControl>
          <FormLabel htmlFor="title">Title</FormLabel>
          <Input id="title" type="text" value={newTodo.title} onChange={(e) => setNewTodo({ ...newTodo, title: e.target.value })} />
          <FormLabel htmlFor="description">Description</FormLabel>
          <Textarea id="description" value={newTodo.description} onChange={(e) => setNewTodo({ ...newTodo, description: e.target.value })} />
          <Button mt={4} leftIcon={<FaPlus />} onClick={addTodo}>
            Add Todo
          </Button>
        </FormControl>
        {/* Todo List */}
        <List spacing={3}>
          {todos.map((todo) => (
            <ListItem key={todo.id} d="flex" justifyContent="space-between" alignItems="center">
              <Box>
                <Text fontWeight="bold">{todo.title}</Text>
                <Text fontSize="sm">{todo.description}</Text>
              </Box>
              <Box>
                <IconButton aria-label="Edit" icon={<FaEdit />} onClick={() => openEditModal(todo)} />
                <IconButton aria-label="Delete" icon={<FaTrash />} onClick={() => deleteTodo(todo.id)} />
              </Box>
            </ListItem>
          ))}
        </List>
        {/* Edit Todo Modal */}
        <Modal isOpen={isOpen} onClose={onClose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>Edit Todo</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <FormControl>
                <FormLabel htmlFor="edit-title">Title</FormLabel>
                <Input id="edit-title" type="text" value={editingTodo?.title} onChange={(e) => setEditingTodo({ ...editingTodo, title: e.target.value })} />
                <FormLabel htmlFor="edit-description">Description</FormLabel>
                <Textarea id="edit-description" value={editingTodo?.description} onChange={(e) => setEditingTodo({ ...editingTodo, description: e.target.value })} />
              </FormControl>
            </ModalBody>
            <ModalFooter>
              <Button colorScheme="blue" mr={3} onClick={updateTodo}>
                Save Changes
              </Button>
              <Button variant="ghost" onClick={onClose}>
                Cancel
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>
      </VStack>
    </ChakraProvider>
  );
};

export default Index;
